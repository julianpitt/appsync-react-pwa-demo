input SubscriptionKeys {
  auth: String!
  p256dh: String!
}

input SubscribeInput {
  endpoint: String!
  keys: SubscriptionKeys!
}

input UnsubscribeInput {
  endpoint: String!
}

input NotificationInput {
  title: String!
  body: String!
  icon: String!
  userPoolGroups: [String!]!
}

type SubscriptionStatus {
  subscribed: Boolean!
}

type UserSubscription {
  userId: String!
  userPoolGroup: String!
  endpoint: String!
}

type Query {
  getUserSubscriptions: [UserSubscription!]!
}

# Define an event to allow WS filtering on
type MessageEvent @aws_iam @aws_cognito_user_pools {
  title: String!
  body: String
  group: String!
}

type Mutation {
  subscribeToNotifications(input: SubscribeInput!): Boolean!
  unsubscribeToNotifications(input: UnsubscribeInput!): Boolean!
  sendNotification(input: NotificationInput!): Boolean! @aws_auth(cognito_groups: ["admin"])
  sendWSMessage(group: String!, title: String!, body: String): MessageEvent! @aws_iam
}

type Subscription {
  inAppNotifications: MessageEvent @aws_subscribe(mutations: ["sendWSMessage"])
}
